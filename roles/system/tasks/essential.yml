---
- name: Check if locale exists
  ansible.builtin.shell:
    cmd: >-
      set -o pipefail &&
      locale -a | grep -i {{ locale | regex_replace('-', '') | quote }}
  register: found_locale
  changed_when: no
  failed_when: no

- name: Create locale
  changed_when: yes
  ansible.builtin.command:
    cmd: "localedef -i {{ locale | regex_replace('(.*)\\..*', '\\1') | quote }} -f {{ locale | regex_replace('.*\\.(.*)', '\\1') | quote }} {{ locale | quote }}"
  when: not ansible_check_mode and found_locale.rc != 0

- name: Check if language exists
  ansible.builtin.shell:
    cmd: >-
      set -o pipefail &&
      locale -a | grep -i {{ locale | regex_replace('-', '') | quote }}
  register: found_language
  changed_when: no
  failed_when: no

- name: Create language
  changed_when: yes
  ansible.builtin.command:
    cmd: "localedef -i {{ locale | regex_replace('(.*)\\..*', '\\1') | quote }} -f {{ locale | regex_replace('.*\\.(.*)', '\\1') | quote }} {{ locale | quote }}"
  when: not ansible_check_mode and found_language.rc != 0

- name: Get current locale and language configuration
  ansible.builtin.command:
    cmd: localectl status
  register: locale_status
  changed_when: no

- name: Parse 'LANG' from current locale and language configuration
  ansible.builtin.set_fact:
    locale_lang: "{{ locale_status.stdout | regex_search('LANG=([^\n]+)', '\\1') | first }}"

- name: Parse 'LANGUAGE' from current locale and language configuration
  ansible.builtin.set_fact:
    locale_language: "{{ locale_status.stdout | regex_search('LANGUAGE=([^\n]+)', '\\1') | default([locale_lang], true) | first }}"

- name: Configure locale to '{{ locale }}' and language to '{{ locale }}'
  ansible.builtin.command:
    cmd: localectl set-locale LANG={{ locale }} LANGUAGE={{ locale }}
  changed_when: locale_lang != locale or locale_language != locale
