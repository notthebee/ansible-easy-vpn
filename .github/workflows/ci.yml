name: CI
run-name: ansible-easy-vpn Testing
on:
  - push
  - workflow_dispatch
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the current branch
        uses: actions/checkout@v3

      - name: Ansible-lint
        uses: ansible-community/ansible-lint-action@main
   
  build:
    runs-on: ubuntu-latest
    environment: cicd
    strategy:
      fail-fast: false
      matrix:
        include:
          - index: 1
            os: ubuntu-22.04
          - index: 2
            os: ubuntu-20.04
          - index: 3
            os: debian-11
    steps:
      - name: Initialize the ssh-agent
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Checkout the branch locally
        uses: actions/checkout@v3

      - name: Update apt cache on the runner and install dependencies
        run: sudo apt update && sudo apt install sshpass expect wamerican

      - name: Generate a random username
        run: echo "EASYVPN_USERNAME=$(shuf -n 1 /usr/share/dict/words | tr '[:upper:]' '[:lower:]' | tr -dc '[:alnum:]' )" >> $GITHUB_ENV

      - name: Generate a random password
        run: echo "EASYVPN_PASSWORD=$(openssl rand -base64 20)" >> $GITHUB_ENV

      - name: Spawn a Hetzner node
        uses: TimDaub/hetzner-cloud-deploy-server-action@v2
        with:
          server-name: ansible-easy-vpn-${{ env.EASYVPN_USERNAME }}
          server-image: ${{ matrix.os }}
          server-type: "cx11"
          ssh-key-name: "github-actions"
          hcloud-token: ${{ secrets.HCLOUD_TOKEN }}

      - name: Add the private key to the ssh-agent 
        run: mkdir -p ~/.ssh/ && ssh-keyscan -H $SERVER_IPV4 >> ~/.ssh/known_hosts

      - name: Update apt cache
        run: ssh root@$SERVER_IPV4 apt update

      - name: Install git and expect
        run: ssh root@$SERVER_IPV4 apt install -y git expect wamerican

      - uses: infraway/create-dns-record@v2.0
        with:
          type: "A"
          name: "${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          content: "${{ env.SERVER_IPV4 }}"
          proxied: false
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}

      - uses: infraway/create-dns-record@v2.0
        with:
          type: "CNAME"
          name: "auth.${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          content: "${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          proxied: false
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}

      - uses: infraway/create-dns-record@v2.0
        with:
          type: "CNAME"
          name: "wg.${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          content: "${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          proxied: false
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}

      - uses: infraway/create-dns-record@v2.0
        with:
          type: "CNAME"
          name: "adguard.${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          content: "${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          proxied: false
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}

      - name: Clone the branch to the Hetzner instance
        run: ssh root@$SERVER_IPV4 git clone https://github.com/notthebee/ansible-easy-vpn -b ${{ github.head_ref || github.ref_name }} 

      - name: Execute the automated bootstrap script
        run: >-
          ssh -t -t root@$SERVER_IPV4 
          "ansible-easy-vpn/testing/expect/defaults.exp 
          --username $EASYVPN_USERNAME 
          --password $EASYVPN_PASSWORD 
          --smtp_server $SMTP_SERVER 
          --smtp_login $SMTP_LOGIN 
          --smtp_password $SMTP_PASSWORD 
          --domain $DOMAIN"
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_LOGIN: ${{ secrets.SMTP_LOGIN }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          DOMAIN: ${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}

      - name: Copy the private key from the Hetzner host
        run: sshpass -p$EASYVPN_PASSWORD scp root@$SERVER_IPV4:/tmp/id_ssh_ed25519 ~/.ssh/id_vpn

      - name: Log into the server
        run: >-
          expect -c "spawn ssh $EASYVPN_USERNAME@$SERVER_IPV4 -i ~/.ssh/id_vpn; expect \"*Enter passphrase for key*\"; send -- \"$EASYVPN_PASSWORD\r\""

      - name: Delete the Cloudflare record
        uses: infraway/delete-dns-record@v2.0
        with:
          name: "${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}

      - name: Delete the Cloudflare record (auth)
        uses: infraway/delete-dns-record@v2.0
        with:
          name: "auth.${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}

      - name: Delete the Cloudflare record (wg)
        uses: infraway/delete-dns-record@v2.0
        with:
          name: "wg.${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}

      - name: Delete the Cloudflare record (adguard)
        uses: infraway/delete-dns-record@v2.0
        with:
          name: "adguard.${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}
