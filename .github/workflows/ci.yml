name: CI
run-name: ansible-easy-vpn Testing
on:
  push:

  workflow_dispatch:
    inputs:
      only_ubuntu_22:
        description: 'Only run on Ubuntu 22.04'
        required: false
        type: boolean
        default: false

      manual:
        description: 'Wait for user input before destroying the server'
        required: false
        type: boolean
        default: false

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the current branch
        uses: actions/checkout@v3

      - name: Ansible-lint
        uses: ansible-community/ansible-lint-action@main

  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      letsencrypt_staging: ${{ steps.set-matrix.outputs.letsencrypt_staging }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2      

      - id: set-matrix
        run: |
          if [[ ${MANUAL_INPUT} == 'true' || ${ONLY_UBUNTU_22} == 'true' ]]; then 
            # Only deploy on Ubuntu 22.04, don't use Letsencrypt Staging 
            matrix=$(jq 'map(. | select((.os=="ubuntu-22.04")) )' .github/workflows/matrix_includes.json)
          else
            # Deploy on all supported OSes, use Letsencrypt Staging to avoid rate-limiting
            matrix=$(jq 'map(.)' .github/workflows/matrix_includes.json)
          fi
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
          echo "letsencrypt_staging='yes'" >> $GITHUB_OUTPUT
        env:
          MANUAL_INPUT: ${{ inputs.manual }}
          ONLY_UBUNTU_22: ${{ inputs.only_ubuntu_22 }}

  build:
    runs-on: ubuntu-latest
    needs: matrix_prep
    environment: cicd
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    steps:
      - name: Initialize the ssh-agent
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Checkout the branch locally
        uses: actions/checkout@v3

      - name: Update apt cache on the runner and install dependencies
        run: sudo apt update && sudo apt install sshpass expect wamerican

      - name: Generate a random username and password
        run: |
          echo "EASYVPN_USERNAME=$(shuf -n 1 /usr/share/dict/words | tr '[:upper:]' '[:lower:]' | tr -dc '[:alnum:]' )" >> $GITHUB_ENV &&
          echo "EASYVPN_PASSWORD=$(openssl rand -base64 20)" >> $GITHUB_ENV

      - name: Set the username and password outputs
        id: random_username
        run: |
          case $INDEX in
            "1")
            echo "EASYVPN_USERNAME_1=$EASYVPN_USERNAME" >> $GITHUB_OUTPUT
            echo "EASYVPN_PASSWORD_1=$EASYVPN_PASSWORD" >> $GITHUB_OUTPUT
            ;;
            "2")
            echo "EASYVPN_USERNAME_2=$EASYVPN_USERNAME" >> $GITHUB_OUTPUT
            echo "EASYVPN_PASSWORD_2=$EASYVPN_PASSWORD" >> $GITHUB_OUTPUT
            ;;
            "3")
            echo "EASYVPN_USERNAME_3=$EASYVPN_USERNAME" >> $GITHUB_OUTPUT
            echo "EASYVPN_PASSWORD_3=$EASYVPN_PASSWORD" >> $GITHUB_OUTPUT
            ;;
            *)
            exit 1
            ;;
          esac
        env:
          INDEX: ${{ matrix.index }}

      - name: Spawn a Hetzner node
        uses: TimDaub/hetzner-cloud-deploy-server-action@v2
        with:
          server-name: ansible-easy-vpn-${{ env.EASYVPN_USERNAME }}
          server-image: ${{ matrix.os }}
          server-type: "cx11"
          ssh-key-name: "github-actions"
          hcloud-token: ${{ secrets.HCLOUD_TOKEN }}
          delete-server: false

      - name: Add the private key to the ssh-agent 
        run: mkdir -p ~/.ssh/ && ssh-keyscan -H $SERVER_IPV4 >> ~/.ssh/known_hosts

      - name: Update apt cache
        run: ssh root@$SERVER_IPV4 apt update

      - name: Install git and expect
        run: ssh root@$SERVER_IPV4 apt install -y git expect wamerican

      - uses: infraway/create-dns-record@v2.0
        with:
          type: "A"
          name: "${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          content: "${{ env.SERVER_IPV4 }}"
          proxied: false
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}

      - uses: infraway/create-dns-record@v2.0
        with:
          type: "CNAME"
          name: "auth.${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          content: "${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          proxied: false
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}

      - uses: infraway/create-dns-record@v2.0
        with:
          type: "CNAME"
          name: "wg.${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          content: "${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          proxied: false
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}

      - uses: infraway/create-dns-record@v2.0
        with:
          type: "CNAME"
          name: "adguard.${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          content: "${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}"
          proxied: false
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}

      - name: Clone the branch to the Hetzner instance
        run: ssh root@$SERVER_IPV4 git clone https://github.com/notthebee/ansible-easy-vpn -b ${{ github.head_ref || github.ref_name }} 

      - name: Execute the automated bootstrap script
        run: >-
          ssh -t -t root@$SERVER_IPV4 
          "export LETSENCRYPT_STAGING=$LETSENCRYPT_STAGING &&
          ansible-easy-vpn/testing/expect/defaults.exp 
          --username $EASYVPN_USERNAME 
          --password $EASYVPN_PASSWORD 
          --smtp_server $SMTP_SERVER 
          --smtp_login $SMTP_LOGIN 
          --smtp_password $SMTP_PASSWORD 
          --domain $DOMAIN"
        env:
          LETSENCRYPT_STAGING: ${{ needs.matrix_prep.outputs.letsencrypt_staging }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_LOGIN: ${{ secrets.SMTP_LOGIN }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          DOMAIN: ${{ env.EASYVPN_USERNAME }}.${{ secrets.CLOUDFLARE_DOMAIN }}

      - name: Copy the private key from the Hetzner host
        run: sshpass -p$EASYVPN_PASSWORD scp root@$SERVER_IPV4:/tmp/id_ssh_ed25519 ~/.ssh/id_vpn

      - name: Log into the server
        run: >-
          expect -c "spawn ssh $EASYVPN_USERNAME@$SERVER_IPV4 -i ~/.ssh/id_vpn; expect \"*Enter passphrase for key*\"; send -- \"$EASYVPN_PASSWORD\r\""

      - name: Wait indefinitely before destroying the server
        if: ${{ inputs.manual == true }}
        run: >-
          sleep infinity
    outputs:
      EASYVPN_USERNAME_1: "${{ steps.random_username.outputs.EASYVPN_USERNAME_1 }}"
      EASYVPN_USERNAME_2: "${{ steps.random_username.outputs.EASYVPN_USERNAME_2 }}"
      EASYVPN_USERNAME_3: "${{ steps.random_username.outputs.EASYVPN_USERNAME_3 }}"
      EASYVPN_PASSWORD_1: "${{ steps.random_username.outputs.EASYVPN_PASSWORD_1 }}"
      EASYVPN_PASSWORD_2: "${{ steps.random_username.outputs.EASYVPN_PASSWORD_2 }}"
      EASYVPN_PASSWORD_3: "${{ steps.random_username.outputs.EASYVPN_PASSWORD_3 }}"

  test:
    runs-on: ubuntu-latest
    environment: cicd
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    needs:
      - matrix_prep
      - build
    steps:
      - name: Check out this repo
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Remove Chrome
        run: sudo apt purge google-chrome-stable

      - name: Remove default Chromium
        run: sudo apt purge chromium-browser

      - name: Install snapd
        run: sudo apt install snapd

      - name: Install chromium
        run: sudo snap install chromium

      - name: Install all necessary packages
        run: pip install webdriver-manager selenium pyotp pexpect

      - name: Run the testing script
        run: python testing/selenium/acceptance.py --username $EASYVPN_USERNAME --password $EASYVPN_PASSWORD --base_url $DOMAIN
        env:
          EASYVPN_USERNAME: "${{ needs.build.outputs[format('EASYVPN_USERNAME_{0}', matrix.index)] }}"
          EASYVPN_PASSWORD: "${{ needs.build.outputs[format('EASYVPN_PASSWORD_{0}', matrix.index)] }}"
          DOMAIN: "${{ needs.build.outputs[format('EASYVPN_USERNAME_{0}', matrix.index)] }}.${{ secrets.CLOUDFLARE_DOMAIN }}"

  destroy:
    runs-on: ubuntu-latest
    environment: cicd
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    if: always()
    needs:
      - matrix_prep
      - build
      - test
    steps:
      - name: Destroy the Hetzner instances
        run: >-
           export SERVER_ID=$(curl -H 
           "Authorization: Bearer $HCLOUD_TOKEN" https://api.hetzner.cloud/v1/servers | 
           jq --arg SERVER_NAME "$SERVER_NAME" '.servers[] | select(.name==$SERVER_NAME) | .id') &&
           curl -X DELETE -H "Authorization: Bearer $HCLOUD_TOKEN" 
           https://api.hetzner.cloud/v1/servers/$SERVER_ID
        env:
          HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
          SERVER_NAME: ansible-easy-vpn-${{ needs.build.outputs[format('EASYVPN_USERNAME_{0}', matrix.index)] }}

      - name: Delete all Cloudflare domains
        run: >-
          curl -s -X GET https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records?per_page=500
          -H "Authorization: Bearer $CLOUDFLARE_TOKEN"
          -H "Content-Type: application/json" |
          jq .result[].id |
          tr -d '"' |
          ( while read id; do curl -s -X DELETE
          https://api.cloudflare.com/client/v4/zones/5420f91fefac252d89d9495a8d35ae73/dns_records/${id}
          -H "Authorization: Bearer $CLOUDFLARE_TOKEN"
          -H "Content-Type: application/json";   done;   )
        env:
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
          ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE }}
